
extends ./base.jade

block title
  title UKSA

block content

  nav(class="navbar navbar-inverse navbar-fixed-top")
    div(class="container-fluid")
      div(class="navbar-header")
        button(
          type="button",
          class="navbar-toggle collapsed",
          data-toggle="collapse",
          data-target="#navbar",
          aria-expanded="false",
          aria-controls="navbar"
        )
          span(class="sr-only") Toggle navigation
          span(class="icon-bar")
          span(class="icon-bar")
          span(class="icon-bar")
        a(class="navbar-brand", rel="home", href="/", title="UKSA")
          img(class="", src="/static/img/logo.jpg", alt="logo")
      div(id="navbar" class="navbar-collapse collapse")
        ul(class="nav navbar-nav")
          li(class="active")
            a(href="/") Home
          li(class="")
            a(href="#") About

  div(class="status-page wrapper container-fluid")

    div(class="top-header-spacing")

    if (errors.whitelist.length)
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") Whitelist error
        div(class="panel-body")
          each whitelistError in errors.whitelist
            div= whitelistError
    else
      div(class="panel panel-success panel-status")
        div(class="panel-heading")
          h3(class="panel-title") Whitelist
        div(class="panel-body")
          pre= whitelist

    if (errors.build.length)
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") Build Error
        div(class="panel-body")
          each buildError in errors.build
            div= buildError

    else if (build.build == "busy")
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title")= (build.process)
        div(class="panel-body")
          div Do not power down the node until the build process has completed.
          div: strong Last updated at #{new Date().toISOString()}
    else
      div(class="panel panel-success panel-status")
        div(class="panel-heading")
          h3(class="panel-title") No build process in progress
        div(class="panel-body")
          div: strong Last updated at #{new Date().toISOString()}

    if (errors.mediaRsync.length)
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") MEDIA RSYNC LOG
        div(class="panel-body")
          each mediaRsyncError in errors.mediaRsync
            pre= mediaRsyncError
    else
      div(class="panel panel-status")
        div(class="panel-heading")
          h3(class="panel-title") MEDIA RSYNC LOG
        div(class="panel-body")
          pre= mediaRsync || 'No log found!'

    //- if (errors.mediaDuHuman.length)
    //-   div(class="panel panel-status")
    //-     div(class="panel-heading")
    //-       h3(class="panel-title") MEDIA DISK USAGE
    //-     div(class="panel-body")
    //-       each mediaDuHumanError in errors.mediaDuHuman
    //-         div= mediaDuHumanError
    //- else
    //-   div(class="panel panel-status")
    //-     div(class="panel-heading")
    //-       h3(class="panel-title") MEDIA DISK USAGE
    //-     div(class="panel-body")
    //-       pre= mediaDuHuman || 'Media disk usage data not found!'

    if (errors.mediaDuMachine.length)
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") MEDIA DISK USAGE
        div(class="panel-body")
          each mediaDuMachineError in errors.mediaDuMachine
            pre= mediaDuMachineError
    else
      div(class="panel panel-success panel-status")
        div(class="panel-heading")
          h3(class="panel-title") MEDIA DISK USAGE
        div(class="panel-body")
          div(class="progress")
            div(
              class=
                mediaDuMachine.missingPercentage <= 25 ? 'progress-bar progress-bar-danger' :
                mediaDuMachine.missingPercentage <= 75 ? 'progress-bar progress-bar-warning' :
                mediaDuMachine.missingPercentage <= 100 ? 'progress-bar progress-bar-success' :
                'progress-bar',
              progress-bar-success
              role="progressbar",
              aria-valuenow=mediaDuMachine.missingPercentage,
              aria-valuemin="0",
              aria-valuemax="100",
              style="min-width: 2em;"
            ) #{mediaDuMachine.missingPercentage}%
          ul
            each folder in mediaDuMachine.duPerFolder
              li: pre= folder
          div Total disk usage: #[pre #{mediaDuMachine.duTotal} (#{mediaDuMachine.missingMegabytes}MB missing)]

    if (wificheck)
      div(class="panel panel-success panel-status")
        div(class="panel-heading")
          h3(class="panel-title") WIFI ENABLED
        div(class="panel-body")
          div WIFI was verified to be working
    else
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") WIFI ERRORS
        div(class="panel-body")
          each wificheckError in errors.wificheck
            div= wificheckError

    if (errors.status.length)
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") STATUS ERRORS
        div(class="panel-body")
          each statusError in errors.status
            div= statusError

    if (errors.node.length)
      div(class="panel panel-danger panel-status")
        div(class="panel-heading")
          h3(class="panel-title") NODE ERRORS
        div(class="panel-body")
          each nodeError in errors.node
            div= nodeError

    div(class="table-responsive")

      table(class="table table-hover table-condensed table-bordered")

        if status && status.node
          - var load = status.node.load.split(' ')
        else
          - var load = ["0", "0", "0"]

        tbody

          tr(class="node-id")
            td Node ID
            td: code= status.nodeid

          tr(class="node-name")
            td Node Name
            td: code= status.node.name

          tr(class="node-serial")
            td Node Serial
            td: code= node.serial

          tr(class="node-port-tunnel")
            td Node Tunnel Port
            td: code= node.port.tunnel

          tr(class="node-port-monitor")
            td Node Monitor Port
            td: code= node.port.monitor

          tr(class="node-server")
            td Node Server
            td: code= node.server

          tr(class="node-cpus")
            td CPUs
            td= status.node.cpus

          tr(class="node-load")
            td One Minute Load Average
            if load[0] >= (status.node.cpus)
              td(class="danger")
                code= load[0] + ' (' + load[0] / (status.node.cpus) * 100 + '%)'
            else if load[0] >= (status.node.cpus) / 2
              td(class="warning")
                code= load[0] + ' (' + load[0] / (status.node.cpus) * 100 + '%)'
            else
              td(class="success")
                code= load[0] + ' (' + load[0] / (status.node.cpus) * 100 + '%)'

          tr(class="node-load")
            td Five Minute Load Average
            if load[1] >= (status.node.cpus)
              td(class="danger")
                code= load[1] + ' (' + load[1] / (status.node.cpus) * 100 + '%)'
            else if load[1] >= (status.node.cpus) / 2
              td(class="warning")
                code= load[1] + ' (' + load[1] / (status.node.cpus) * 100 + '%)'
            else
              td(class="success")
                code= load[1] + ' (' + load[1] / (status.node.cpus) * 100 + '%)'

          tr(class="node-load")
            td Fifteen Minute Load Average
            if load[2] >= (status.node.cpus)
              td(class="danger")
                code= load[2] + ' (' + load[2] / (status.node.cpus) * 100 + '%)'
            else if load[2] >= (status.node.cpus) / 2
              td(class="warning")
                code= load[2] + ' (' + load[2] / (status.node.cpus) * 100 + '%)'
            else
              td(class="success")
                code= load[2] + ' (' + load[2] / (status.node.cpus) * 100 + '%)'

          tr(class="node-uptime")
            td Uptime
            td: code #{((status.node.uptime) / 60).toFixed(2)} minutes

          tr(class="node-ram")
            td Free/Total RAM
            td(class=status.node.memory.free < status.node.memory.total ? "success" : "warning")
              code #{((status.node.memory.free) / 1024 / 1024 / 1024).toFixed(2)} Gb / #{((status.node.memory.total) / 1024 / 1024 / 1024).toFixed(2)} Gb

          tr(class="node-totalmem")
            td Free/Total Memory
            if status.node.disk.free <= status.node.disk.total / 2
              td(class="warning"): code #{((status.node.disk.free) / 1024).toFixed(2)} Gb / #{((status.node.disk.total) / 1024).toFixed(2)} Gb
            else if status.node.disk.free <= status.node.disk.total
              td(class="success"): code #{((status.node.disk.free) / 1024).toFixed(2)} Gb / #{((status.node.disk.total) / 1024).toFixed(2)} Gb
            else
              td(class="danger"): code #{((status.node.disk.free) / 1024).toFixed(2)} Gb / #{((status.node.disk.total) / 1024).toFixed(2)} Gb

          tr(class="node-raid")
            td RAID Status
            td: code= JSON.stringify(status.node.disk.raid)

          tr(class="node-wireless")
            td Wireless
            td: code= JSON.stringify(status.node.wireless)

          tr(class="node-router")
            td Router
            td: code= JSON.stringify(status.node.router)

          tr(class="node-relays")
            td Relays
            td: code= JSON.stringify(status.node.relays)

          tr(class="node-bgan-faults")
            td BGAN Faults
            td(class=(status.bgan.faults) > 0 ? "danger" : "success")
              code= (status.bgan.faults)

          tr(class="node-bgan-latlon")
            td BGAN Lat/Lon
            td: code #{(status.bgan.lat)}/#{(status.bgan.lng)}

          tr(class="node-bgan-status")
            td BGAN Status
            td(class=(status.bgan.status) == "allowed" ? "success" : "warning")
              code= (status.bgan.status)

          tr(class="node-bgan-ethernet")
            td BGAN Ethernet
            td(class=(status.bgan.ethernet) ? "success" : "danger")
              code= (status.bgan.ethernet)

          tr(class="node-bgan-usb")
            td BGAN USB
            td(class=(status.bgan.usb) ? "success" : "danger")
              code= (status.bgan.usb)

          tr(class="node-bgan-signal")
            td BGAN Signal
            td: code= (status.bgan.signal)

          tr(class="node-bgan-temp")
            td BGAN Temperature
            if (status.bgan.temp) >= 60
              td(class="danger"): code= (status.bgan.temp)
            else if (status.bgan.temp) >= 45
              td(class="warning"): code= (status.bgan.temp)
            else
              td(class="success"): code= (status.bgan.temp)

          tr(class="node-bgan-imsi")
            td BGAN IMSI
            td: code= (status.bgan.imsi)

          tr(class="node-bgan-imei")
            td BGAN IMEI
            td: code= (status.bgan.imei)

          tr(class="node-bgan-ip")
            td BGAN IP Address
            td: code= (status.bgan.ip)

          tr(class="node-bgan-satelliteid")
            td BGAN Satellite ID
            td: code= (status.bgan.satellite_id)

    pre(class="pre-scrollable node-pubkey") #{(node.publickey)}

    p(class="timestamp") Metrics last updated at: #{new Date(status.timestamp).toISOString()}

block scripts

  script.
      var brand = $('.navbar-brand');
      var brandImg = $('.navbar-brand img');

      $(window).scroll(function() {
        if (brand.offset().top > 25) {
          brand.addClass('brand-collapse');
          brandImg.attr('src', '/static/img/logo-min-box.jpg');
        } else {
          console.log('top offset not greater than 25');
          brand.removeClass('brand-collapse');
          brandImg.attr('src', '/static/img/logo.jpg');
        }
      });

