
extends ./base.jade

block title
  title UKSA

block content

  div(class="container")

    br
    br
    br

    p(class="timestamp") Last update: #{new Date(status.timestamp).toISOString()}

    div(class="table-responsive")

      table(class="table table-hover table-condensed table-bordered")

        - var load = status.node.load.split(' ')

        tbody

          tr(class="node-id")
            td Node ID
            td: code= status.nodeid

          tr(class="node-name")
            td Node Name
            td: code= node.name

          tr(class="node-serial")
            td Node Serial
            td: code= node.serial

          tr(class="node-port-tunnel")
            td Node Tunnel Port
            td: code= node.port.tunnel

          tr(class="node-port-monitor")
            td Node Monitor Port
            td: code= node.port.monitor

          tr(class="node-server")
            td Node Server
            td: code= node.server

          tr(class="node-publickey")
            td Node Public Key
            td= node.publickey

          tr(class="node-cpus")
            td CPUs
            td= status.node.cpus

          tr(class="node-load")
            td One Minute Load Average
            if load[0] >= status.node.cpus
              td(class="danger"): code= load[0]
            else if load[0] >= status.node.cpus / 2
              td(class="warning"): code= load[0]
            else
              td(class="success"): code= load[0]

          tr(class="node-load")
            td Five Minute Load Average
            if load[0] >= status.node.cpus
              td(class="danger"): code= load[1]
            else if load[0] >= status.node.cpus / 2
              td(class="warning"): code= load[1]
            else
              td(class="success"): code= load[1]

          tr(class="node-load")
            td Fifteen Minute Load Average
            if load[0] >= status.node.cpus
              td(class="danger"): code= load[2]
            else if load[0] >= status.node.cpus / 2
              td(class="warning"): code= load[2]
            else
              td(class="success"): code= load[2]

          tr(class="node-uptime")
            td Uptime
            td: code #{(status.node.uptime / 60).toFixed(2)} minutes

          tr(class="node-totalram")
            td Total RAM
            td: code #{(status.node.memory.total / 1024 / 1024 / 1024).toFixed(2)} Gb

          tr(class="node-freeram")
            td Free RAM
            td(class=status.node.memory.free < status.node.memory.total ? "success" : "warning")
              code #{(status.node.memory.free / 1024 / 1024 / 1024).toFixed(2)} Gb

          tr(class="node-totalmem")
            td Total Memory
            td: code #{(status.node.disk.total / 1024).toFixed(2)} Gb

          tr(class="node-freemem")
            td Free Memory
            if status.node.disk.free <= status.node.disk.total / 2
              td(class="warning"): code #{(status.node.disk.free / 1024).toFixed(2)} Gb
            else if status.node.disk.free <= status.node.disk.total
              td(class="success"): code #{(status.node.disk.free / 1024).toFixed(2)} Gb
            else
              td(class="danger"): code #{(status.node.disk.free / 1024).toFixed(2)} Gb

          tr(class="node-raid")
            td RAID Status
            td(class=status.node.disk.raid_healthy ? "success" : "warning")
              code= JSON.stringify(status.node.disk.raid)

          tr(class="node-wireless")
            td Wireless
            td: code= status.node.wireless

          tr(class="node-router")
            td Router
            td: code= status.node.router

          tr(class="node-relays")
            td Relays
            td: code= status.node.relays

          tr(class="node-bgan-faults")
            td BGAN Faults
            if status.bgan.faults > 0
              td(class="danger"): code= status.bgan.faults
            else
              td(class="success"): code= status.bgan.faults

          tr(class="node-bgan-latlon")
            td BGAN Lat/Lon
            td: code #{status.bgan.lat}/#{status.bgan.lng}

          tr(class="node-bgan-status")
            td BGAN Status
            td: code= status.bgan.status

          tr(class="node-bgan-ethernet")
            td BGAN Ethernet
            if status.bgan.ethernet
              td(class="success") Active
            else
              td(class="danger") Inactive

          tr(class="node-bgan-usb")
            td BGAN USB
            if status.bgan.usb
              td(class="success") Active
            else
              td(class="danger") Inactive

          tr(class="node-bgan-signal")
            td BGAN Signal
            td: code= status.bgan.signal

          tr(class="node-bgan-temp")
            td BGAN Temperature
            if status.bgan.temp >= 60
              td(class="danger"): code=status.bgan.temp
            else if status.bgan.temp >= 45
              td(class="warning"): code=status.bgan.temp
            else
              td(class="success"): code=status.bgan.temp

          tr(class="node-bgan-imsi")
            td BGAN IMSI
            td: code= status.bgan.imsi

          tr(class="node-bgan-imei")
            td BGAN IMEI
            td: code= status.bgan.imei

          tr(class="node-bgan-satelliteid")
            td BGAN Satellite ID
            td: code= status.bgan.satellite_id
